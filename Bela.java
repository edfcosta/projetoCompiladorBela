/* Generated By:JavaCC: Do not edit this line. Bela.java */
import java.io.*;
import java.util.ArrayList;
import ast.*;
import java.io.IOException;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.FileInputStream;



public class Bela implements BelaConstants {

  public static void main(String args[]) throws ParseException, IOException {
    Bela parser = new Bela(new FileInputStream(args[0]));
    Prog arvore = parser.Bela();
    String programa = geraCodigo(arvore, args[0]);

    String nomeArquivo = args[0].replace(".bela", ".java");
    FileWriter writer = new FileWriter("programas/" + nomeArquivo);
        writer.write(programa);
        writer.close();
  }

  public static String geraCodigo(Prog prog, String nomeArquivo) {
    return prog.toString(nomeArquivo.replace(".bela", ""));
  }

  static final public Prog Bela() throws ParseException {
  Main main = null; ArrayList<Fun> func = null;
    main = Main();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      func = Func();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
                                   {if (true) return new Prog(main, func);}
    throw new Error("Missing return statement in function");
  }

  static final public Main Main() throws ParseException {
  ArrayList<VarDecl> vars = null; ArrayList<Comando> coms = null;
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    coms = SeqComandos();
    jj_consume_token(FCHAVES);
    {if (true) return new Main(vars, coms);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<VarDecl> VarDecl() throws ParseException {
  ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); Token id; String tipo;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR);
      tipo = Tipo();
      id = jj_consume_token(TOKEN_id);
      jj_consume_token(SEQ);
                                                vars.add(new VarDecl(tipo, id.image));
    }
    {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  static final public String Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
            {if (true) return "float";}
      break;
    case BOOL:
      jj_consume_token(BOOL);
           {if (true) return "bool";}
      break;
    case VOID:
      jj_consume_token(VOID);
           {if (true) return "void";}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Comando> SeqComandos() throws ParseException {
  ArrayList<Comando> coms = new ArrayList<Comando>(); Comando c = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTLN:
      case TOKEN_id:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      c = Comando();
                    coms.add(c);
    }
    {if (true) return coms;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando Comando() throws ParseException {
  Token id = null;
  Token ifToken = null;
  Token whileToken = null;
  Token returnToken = null;
  Token printLnToken = null;
  Exp exp = null;
  ArrayList<Comando> coms = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOKEN_id:
      id = jj_consume_token(TOKEN_id);
                    {if (true) return ComandoL(id);}
      break;
    case IF:
      ifToken = jj_consume_token(IF);
      exp = Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      coms = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEQ);
                                                                                     {if (true) return new CIf(ifToken.beginLine, exp, coms);}
      break;
    case WHILE:
      whileToken = jj_consume_token(WHILE);
      exp = Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      coms = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEQ);
                                                                                           {if (true) return new CWhile(whileToken.beginLine, exp, coms);}
      break;
    case RETURN:
      returnToken = jj_consume_token(RETURN);
      exp = Exp();
      jj_consume_token(SEQ);
                                             {if (true) return new CReturn(returnToken.beginLine, exp);}
      break;
    case PRINTLN:
      printLnToken = jj_consume_token(PRINTLN);
      exp = Exp();
      jj_consume_token(SEQ);
                                               {if (true) return new CPrint(printLnToken.beginLine, exp);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoL(Token id) throws ParseException {
  Exp exp = null;
  Token atrib = null;
  Token chamadaFun = null;
  ArrayList<Exp> exps = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      atrib = jj_consume_token(ATRIB);
                    {if (true) return ComandoLL(atrib, id);}
      break;
    case APAR:
      chamadaFun = jj_consume_token(APAR);
      exps = ListaExp();
      jj_consume_token(FPAR);
      jj_consume_token(SEQ);
                                                       {if (true) return new CChamadaFun(chamadaFun.beginLine, id.image, exps);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoLL(Token atrib, Token id) throws ParseException {
  Exp exp = null; Token read = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
    case TRUE:
    case FALSE:
    case TOKEN_id:
    case TOKEN_numliteral:
      exp = Exp();
      jj_consume_token(SEQ);
                      {if (true) return new CAtribuicao(atrib.beginLine, id.image, exp);}
      break;
    case READINPUT:
      read = jj_consume_token(READINPUT);
      jj_consume_token(APAR);
      jj_consume_token(FPAR);
      jj_consume_token(SEQ);
                                             {if (true) return new CReadInput(read.beginLine, id.image);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
  String op = null;
  Exp exp1 = null;
  Exp exp2 = null;
  Exp f = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      exp1 = Exp();
      op = Op();
      exp2 = Exp();
      jj_consume_token(FPAR);
                                                      {if (true) return new EOpExp(op, exp1, exp2);}
      break;
    case TRUE:
    case FALSE:
    case TOKEN_id:
    case TOKEN_numliteral:
      f = Fator();
                {if (true) return f;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Fator() throws ParseException {
  Token id = null;
  ArrayList<Exp> exps = null;
  Token t = null;
    if (jj_2_1(2)) {
      id = jj_consume_token(TOKEN_id);
      jj_consume_token(APAR);
      exps = ListaExp();
      jj_consume_token(FPAR);
                                                                 {if (true) return new EChamadaFun(id.image, exps);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_id:
        id = jj_consume_token(TOKEN_id);
                    {if (true) return new EVar(id.image);}
        break;
      case TOKEN_numliteral:
        t = jj_consume_token(TOKEN_numliteral);
                           {if (true) return new EFloat(Float.parseFloat(t.image));}
        break;
      case TRUE:
        jj_consume_token(TRUE);
           {if (true) return new ETrue();}
        break;
      case FALSE:
        jj_consume_token(FALSE);
            {if (true) return new EFalse();}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

///ArrayList<Exp> FatorL() :
///{
///  ArrayList<Exp> exps = new ArrayList<Exp>();
///}
///{
///  
///  <APAR> exps = ListaExp() <FPAR> { return exps; }
///  | { return exps; }
///}
  static final public String Op() throws ParseException {
  Token op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      op = jj_consume_token(SOMA);
               {if (true) return op.image;}
      break;
    case SUB:
      op = jj_consume_token(SUB);
              {if (true) return op.image;}
      break;
    case MULT:
      op = jj_consume_token(MULT);
               {if (true) return op.image;}
      break;
    case DIV:
      op = jj_consume_token(DIV);
              {if (true) return op.image;}
      break;
    case AND:
      op = jj_consume_token(AND);
              {if (true) return op.image;}
      break;
    case OR:
      op = jj_consume_token(OR);
             {if (true) return op.image;}
      break;
    case MENORQ:
      op = jj_consume_token(MENORQ);
                 {if (true) return op.image;}
      break;
    case MAIORQ:
      op = jj_consume_token(MAIORQ);
                 {if (true) return op.image;}
      break;
    case COMPARA:
      op = jj_consume_token(COMPARA);
                  {if (true) return op.image;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> ListaExp() throws ParseException {
  Exp exp = null;
  ArrayList<Exp> exps = new ArrayList<Exp>();
  ArrayList<Exp> expsL = new ArrayList<Exp>();
    label_3:
    while (true) {
      exp = Exp();
                 exps.add(exp);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(VIRGULA);
        exp = Exp();
                              exps.add(exp);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case TOKEN_id:
      case TOKEN_numliteral:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
    }
    {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

///ArrayList<Exp> ListaExpL() :
///{
  ///Exp exp = null;
  ///ArrayList<Exp> exps = new ArrayList<Exp>();
///}
///{
  //( <VIRGULA> exp = Exp() { exps.add(exp); } )? { return exps; }
//}
  static final public ArrayList<Fun> Func() throws ParseException {
  ArrayList<Fun> funcs = new ArrayList<Fun>();
  Token nome = null;
  ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>();
  String retorno = null;
  ArrayList<VarDecl> vars = new ArrayList<VarDecl>();
  ArrayList<Comando> body = new ArrayList<Comando>();
    label_5:
    while (true) {
      jj_consume_token(FUN);
      retorno = Tipo();
      nome = jj_consume_token(TOKEN_id);
      jj_consume_token(APAR);
      params = ListaArg();
      jj_consume_token(FPAR);
      jj_consume_token(ACHAVES);
      vars = VarDecl();
      body = SeqComandos();
      jj_consume_token(FCHAVES);
      funcs.add(new Fun(nome.image, params, retorno, vars, body));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUN:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
    {if (true) return funcs;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {
  String tipo = null;
  Token id = null;
  ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>();
    label_6:
    while (true) {
      tipo = Tipo();
      id = jj_consume_token(TOKEN_id);
                                   params.add(new ParamFormalFun(tipo, id.image));
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(VIRGULA);
        tipo = Tipo();
        id = jj_consume_token(TOKEN_id);
                                                params.add(new ParamFormalFun(tipo, id.image));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
      case BOOL:
      case VOID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
    }
                                                                                                          {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(TOKEN_id)) return true;
    if (jj_scan_token(APAR)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x800,0x38000,0xd40000,0xd40000,0x4080,0x200080,0x80,0x0,0xff000000,0x2000,0x80,0x40,0x2000,0x38000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x8,0x8,0x0,0x1e,0x1e,0x1e,0x1,0x0,0x1e,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
