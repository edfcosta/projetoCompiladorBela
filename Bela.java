/* Generated By:JavaCC: Do not edit this line. Bela.java */
import java.io.*;
public class Bela implements BelaConstants {

  public static void main(String args[]) throws ParseException,IOException {
          Bela parser = new Bela(new FileInputStream(args[0]));
    parser.Bela();
  }

  static final public void Bela() throws ParseException {
    Main();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      Func();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    VarDecl();
    SeqComandos();
    jj_consume_token(FCHAVES);

  }

  static final public void VarDecl() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR);
      Tipo();
      jj_consume_token(TOKEN_id);
      jj_consume_token(SEQ);
    }
  }

  static final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SeqComandos() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTLN:
      case TOKEN_id:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      Comando();
    }
  }

  static final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOKEN_id:
      jj_consume_token(TOKEN_id);
      ComandoL();
      break;
    case IF:
      jj_consume_token(IF);
      Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEQ);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(SEQ);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(SEQ);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      Exp();
      jj_consume_token(SEQ);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ComandoL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      jj_consume_token(ATRIB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case TOKEN_id:
      case TOKEN_numliteral:
        Exp();
        jj_consume_token(SEQ);
        break;
      case READINPUT:
        jj_consume_token(READINPUT);
        jj_consume_token(APAR);
        jj_consume_token(FPAR);
        jj_consume_token(SEQ);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case APAR:
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case TOKEN_id:
      case TOKEN_numliteral:
        ListaExp();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(SEQ);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      Exp();
      Op();
      Exp();
      jj_consume_token(FPAR);
      break;
    case TRUE:
    case FALSE:
    case TOKEN_id:
    case TOKEN_numliteral:
      Fator();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOKEN_id:
      jj_consume_token(TOKEN_id);
      FatorL();
      break;
    case TOKEN_numliteral:
      jj_consume_token(TOKEN_numliteral);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FatorL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case TOKEN_id:
      case TOKEN_numliteral:
        ListaExp();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SUB:
      jj_consume_token(SUB);
      break;
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case MENORQ:
      jj_consume_token(MENORQ);
      break;
    case MAIORQ:
      jj_consume_token(MAIORQ);
      break;
    case COMPARA:
      jj_consume_token(COMPARA);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ListaExp() throws ParseException {
    Exp();
    ListaExpL();
  }

  static final public void ListaExpL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      Exp();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  static final public void Func() throws ParseException {
    jj_consume_token(FUN);
    Tipo();
    jj_consume_token(TOKEN_id);
    jj_consume_token(APAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
    case BOOL:
    case VOID:
      ListaArg();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    VarDecl();
    SeqComandos();
    jj_consume_token(FCHAVES);
    FuncL();
  }

  static final public void FuncL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      jj_consume_token(FUN);
      Tipo();
      jj_consume_token(TOKEN_id);
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
      case BOOL:
      case VOID:
        ListaArg();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(ACHAVES);
      VarDecl();
      SeqComandos();
      jj_consume_token(FCHAVES);
      FuncL();
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  static final public void ListaArg() throws ParseException {
    Tipo();
    jj_consume_token(TOKEN_id);
    ListaArgL();
  }

  static final public void ListaArgL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      Tipo();
      jj_consume_token(TOKEN_id);
      ListaArgL();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x800,0x38000,0xd40000,0xd40000,0x200080,0x80,0x4080,0x80,0x0,0x80,0x80,0xff000000,0x2000,0x38000,0x38000,0x40,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x8,0x8,0x1e,0x1e,0x0,0x1e,0x1e,0x1e,0x0,0x1,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
