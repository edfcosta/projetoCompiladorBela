PARSER_BEGIN(Bela)
import java.io.*;
public class Bela {

  public static void main(String args[]) throws ParseException,IOException {
 	  Bela parser = new Bela(new FileInputStream(args[0]));
    parser.Bela();
  }
}

PARSER_END(Bela)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
<MAIN: "main">
|<FUN: "fun">
|<APAR: "(">
|<FPAR: ")">
|<ACHAVES: "{">
|<FCHAVES: "}">
|<VAR: "var">
|<SEQ: ";">
|<VIRGULA: ",">
|<ATRIB: "=">
|<FLOAT: "float">
|<BOOL: "bool">
|<VOID: "void">
|<IF: "if">
|<THEN: "then">
|<WHILE: "while">
|<READINPUT: "readInput">
|<RETURN : "return">
|<PRINTLN: "printLn">
|<SOMA: "+">
|<SUB: "-">
|<MULT: "*">
|<DIV: "/">
|<AND: "&&">
|<OR: "||">
|<MENORQ: "<">
|<MAIORQ: ">">
|<COMPARA: "==">
|<TRUE: "true">
|<FALSE: "false">
}

TOKEN :
{
  <TOKEN_id: <LETRA> (<LETRAOUDIGITO>)* (<FINAL_SUBLINHADO>)*>
  |<TOKEN_numliteral: <DIGITOS> <FACAO_OPCIONAL> <EXPOENTE_OPCIONAL>>
  |<# LETRA: ["a"-"z","A"-"Z"]>
  |<# DIGITO: ["0"-"9"]>
  |<# DIGITOS: (<DIGITO>)+>
  |<# FACAO_OPCIONAL: ("."<DIGITOS>)?>
  |<# EXPOENTE_OPCIONAL: ("E" ("+" | "-")? <DIGITOS>)?>
  |<# LETRAOUDIGITO: (<LETRA> | <DIGITO>)>
  |<# FINAL_SUBLINHADO: ("_"<LETRAOUDIGITO>)+>
}

void Bela () :
{}
{
  Main() (Func())?
}

void Main () :
{}
{
  <MAIN> <APAR> <FPAR> <ACHAVES> VarDecl( ) SeqComandos() <FCHAVES>
  {}
}

void VarDecl () :
{}
{
  (<VAR> Tipo() <TOKEN_id> <SEQ>)*
}

void Tipo () :
{}
{
  <FLOAT> | <BOOL> | <VOID>
}

void SeqComandos () :
{}
{
  (Comando())*
}

void Comando () :
{}
{
  <TOKEN_id> ComandoL()
  | <IF> Exp() <THEN> <ACHAVES> SeqComandos() <FCHAVES> <SEQ>
  | <WHILE> Exp() <THEN> <ACHAVES> SeqComandos() <FCHAVES> <SEQ>
  | <RETURN> Exp() <SEQ>
  | <PRINTLN> Exp() <SEQ>
}

void ComandoL() :
{}
{
  <ATRIB> (Exp() <SEQ> | <READINPUT> <APAR> <FPAR> <SEQ>)
  |<APAR> (ListaExp())? <FPAR> <SEQ>
}

void Exp () :
{}
{
  <APAR> Exp() Op() Exp() <FPAR> | Fator()
}

void Fator () :
{}
{
  <TOKEN_id> FatorL()
  | <TOKEN_numliteral> | <TRUE> | <FALSE>
}
void FatorL() : 
{}
{
  <APAR> (ListaExp())? <FPAR> | {}
}

void Op() :
{}
{
  <SOMA> | <SUB> | <MULT> | <DIV> | <AND> | <OR> | <MENORQ> | <MAIORQ> | <COMPARA>
}

void ListaExp() :
{}
{
  Exp() ListaExpL()
  }

void ListaExpL() :
{}
{
  <VIRGULA> Exp() | {}
}

void Func() :
{}
{
  <FUN> Tipo() <TOKEN_id> <APAR> (ListaArg())? <FPAR> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> FuncL()
}

void FuncL() :
{}
{
  <FUN> Tipo() <TOKEN_id> <APAR> (ListaArg())? <FPAR> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> FuncL() | {}
}

void ListaArg () :
{}
{
  Tipo() <TOKEN_id> ListaArgL()
}

void ListaArgL() :
{}
{
  <VIRGULA> Tipo() <TOKEN_id> ListaArgL() | {}
}

